[mlir-neura-opt] Architecture specification file: ../../arch_spec/architecture.yaml
Checking use: %24 = "neura.gep"(%1, %23, %22) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: %14 = "neura.gep"(%1, %13, %12) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: "neura.return"(%4) : (i32) -> ()
Checking use: "neura.store"(%4, %7) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %13) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %6) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %5) : (i32, !llvm.ptr) -> ()
Checking use: %7 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %6 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %5 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %23 = "neura.gep"(%1, %22, %21) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: %13 = "neura.gep"(%1, %12, %11) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: "neura.return"(%4) : (i32) -> ()
Checking use: "neura.store"(%4, %7) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %13) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %6) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %5) : (i32, !llvm.ptr) -> ()
Checking use: %7 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %6 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %5 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: "neura.store"(%1, %4) : (i32, !llvm.ptr) -> ()
Checking use: %4 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %3 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %2 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: "neura.store"(%1, %4) : (i32, !llvm.ptr) -> ()
Checking use: %4 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %3 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %2 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: "neura.store"(%1, %4) : (i32, !llvm.ptr) -> ()
Checking use: %4 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %3 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %2 = neura.alloca %0 : i32 -> !llvm.ptr
Checking use: %23 = "neura.gep"(%1, %22, %21) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: %13 = "neura.gep"(%1, %12, %11) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: "neura.return"(%4) : (i32) -> ()
Checking use: "neura.store"(%4, %7) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %13) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %6) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %5) : (i32, !llvm.ptr) -> ()
Checking use: %7 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %6 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %5 = neura.alloca %3 : i32 -> !llvm.ptr
[ctrl2data] Asserting live-out values dominated by block arguments
[ctrl2data] All live-out values are dominated by block arguments or live-in values.
[ctrl2data] ReturnOp found: "neura.return"() : () -> ()
[ctrl2data] Asserting live-out values dominated by block arguments
[ctrl2data] All live-out values are dominated by block arguments or live-in values.
[ctrl2data] Set dataflow mode to predicate for function: _Z6kernelPiS_
Checking use: %23 = "neura.gep"(%1, %22, %21) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: %13 = "neura.gep"(%1, %12, %11) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: "neura.return"(%4) : (i32) -> ()
Checking use: "neura.store"(%4, %7) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %13) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %6) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %5) : (i32, !llvm.ptr) -> ()
Checking use: %7 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %6 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %5 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: "neura.store"(%3, %8) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: %8 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: %6 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: %4 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: "neura.store"(%1, %6) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: "neura.store"(%0, %4) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: "neura.store"(%3, %8) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: %8 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: %6 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: %4 = neura.alloca %2 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
Checking use: "neura.store"(%1, %6) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: "neura.store"(%0, %4) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
Checking use: %23 = "neura.gep"(%1, %22, %21) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: %13 = "neura.gep"(%1, %12, %11) : (!llvm.ptr, index, i64) -> !llvm.ptr
Checking use: "neura.return"(%4) : (i32) -> ()
Checking use: "neura.store"(%4, %7) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %13) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %6) : (i32, !llvm.ptr) -> ()
Checking use: "neura.store"(%4, %5) : (i32, !llvm.ptr) -> ()
Checking use: %7 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %6 = neura.alloca %3 : i32 -> !llvm.ptr
Checking use: %5 = neura.alloca %3 : i32 -> !llvm.ptr
[MapToAcceleratorPass] Using Mapping Mode: spatial-temporal
Collecting recurrence cycles from back edge: parent_op %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%28 = neura.reserve : !neura.data<!llvm.ptr, i1>
Collecting recurrence cycles from back edge: parent_op %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%25 = neura.reserve : !neura.data<!llvm.ptr, i1>
Collecting recurrence cycles from back edge: parent_op %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%22 = neura.reserve : !neura.data<!llvm.ptr, i1>
[calculateResMii] Total operations: 60
[MapToAcceleratorPass] rec_mii=12, res_mii=1, possibleMinII=12, maxII=20 (from YAML config)
Collecting recurrence cycles from back edge: parent_op %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%28 = neura.reserve : !neura.data<!llvm.ptr, i1>
Collecting recurrence cycles from back edge: parent_op %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%25 = neura.reserve : !neura.data<!llvm.ptr, i1>
Collecting recurrence cycles from back edge: parent_op %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>->%22 = neura.reserve : !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Start mapping with target II of 12
[calculateAward] Operation: %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1>; Producers: 0
[DEBUG] Schedule op %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1> onto loc: tile#5 @t=0
[calculateAward] Operation: %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#6 @t=1
Processing operand: %12 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %12 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#5 @t=0 to tile#6 @t=1
[calculateAward] Operation: %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#5 @t=2
Processing operand: %14 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %14 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#6 @t=1 to tile#5 @t=2
[calculateAward] Operation: %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#13 @t=3
Processing operand: %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
Processing operand: %29 = "neura.data_mov"(%15) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %29 = "neura.data_mov"(%15) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#5 @t=2 to tile#13 @t=3
[calculateAward] Operation: %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#30 @t=4
Processing operand: %4 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %4 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#5 @t=0 to tile#30 @t=4
[calculateAward] Operation: %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#13 @t=4
Processing operand: %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=3 to tile#13 @t=4
[calculateAward] Operation: %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=5
Processing operand: %6 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %6 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#30 @t=4 to tile#29 @t=5
[calculateAward] Operation: %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>; Producers: 1
[DEBUG] Schedule op %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1> onto loc: tile#13 @t=5
Processing operand: %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#13 @t=4 to tile#13 @t=5
[calculateAward] Operation: %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=6
Processing operand: %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
Processing operand: %26 = "neura.data_mov"(%7) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %26 = "neura.data_mov"(%7) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=5 to tile#29 @t=6
[calculateAward] Operation: %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#13 @t=6
Processing operand: %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=3 to tile#13 @t=6
Processing operand: %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#13 @t=5 to tile#13 @t=6
[calculateAward] Operation: %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=7
Processing operand: %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=6 to tile#29 @t=7
Processing operand: %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#13 @t=5 to tile#29 @t=7
[calculateAward] Operation: %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#13 @t=7
Processing operand: %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=6 to tile#13 @t=7
[calculateAward] Operation: %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=8
Processing operand: %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=7 to tile#29 @t=8
[calculateAward] Operation: %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>; Producers: 1
[DEBUG] Schedule op %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1> onto loc: tile#13 @t=8
Processing operand: %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#13 @t=7 to tile#13 @t=8
[calculateAward] Operation: %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#21 @t=9
Processing operand: %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=8 to tile#21 @t=9
Processing operand: %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[DEBUG] Successfully routed data move: %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> from tile#13 @t=8 to tile#21 @t=9
[calculateAward] Operation: %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#19 @t=10
Processing operand: %8 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %8 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#5 @t=0 to tile#19 @t=10
[calculateAward] Operation: %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#21 @t=10
Processing operand: %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#21 @t=9 to tile#21 @t=10
[calculateAward] Operation: %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#18 @t=11
Processing operand: %10 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %10 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#19 @t=10 to tile#18 @t=11
[calculateAward] Operation: %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>; Producers: 1
[DEBUG] Schedule op %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1> onto loc: tile#21 @t=11
Processing operand: %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#21 @t=10 to tile#21 @t=11
[calculateAward] Operation: %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#18 @t=12
Processing operand: %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
Processing operand: %23 = "neura.data_mov"(%11) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %23 = "neura.data_mov"(%11) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=11 to tile#18 @t=12
[calculateAward] Operation: %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>; Producers: 1
[DEBUG] Schedule op %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> onto loc: tile#21 @t=12
Processing operand: %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=11 to tile#21 @t=12
[calculateAward] Operation: %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#13 @t=12
Processing operand: %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=6 to tile#13 @t=12
Processing operand: %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=11 to tile#13 @t=12
[calculateAward] Operation: %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=12
Processing operand: %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=7 to tile#29 @t=12
Processing operand: %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=11 to tile#29 @t=12
[calculateAward] Operation: %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#18 @t=13
Processing operand: %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=12 to tile#18 @t=13
Processing operand: %42 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %42 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#13 @t=5 to tile#18 @t=13
[calculateAward] Operation: %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=13
Processing operand: %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=7 to tile#29 @t=13
Processing operand: %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=12 to tile#29 @t=13
[calculateAward] Operation: %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#13 @t=13
Processing operand: %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=6 to tile#13 @t=13
Processing operand: %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=12 to tile#13 @t=13
[calculateAward] Operation: %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#19 @t=14
Processing operand: %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=13 to tile#19 @t=14
Processing operand: %64 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %64 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=11 to tile#19 @t=14
[calculateAward] Operation: %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> onto loc: tile#18 @t=15
Processing operand: %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=13 to tile#18 @t=15
Processing operand: %69 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[DEBUG] Successfully routed data move: %69 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> from tile#21 @t=12 to tile#18 @t=15
[calculateAward] Operation: %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#11 @t=14
Processing operand: %90 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %90 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=12 to tile#11 @t=14
[calculateAward] Operation: %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#4 @t=14
Processing operand: %79 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %79 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=12 to tile#4 @t=14
[calculateAward] Operation: %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#29 @t=14
Processing operand: %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=12 to tile#29 @t=14
Processing operand: %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=13 to tile#29 @t=14
[DEBUG] Found ctrl_mov user: neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[tryRouteBackwardMove] src_loc: tile#29 @t=14, dst_loc: tile#29 @t=6
[DEBUG] Successfully routed ctrl_mov: neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> to tile#29 @t=6
[calculateAward] Operation: %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#13 @t=14
Processing operand: %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=12 to tile#13 @t=14
Processing operand: %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=13 to tile#13 @t=14
[DEBUG] Found ctrl_mov user: neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[tryRouteBackwardMove] src_loc: tile#13 @t=14, dst_loc: tile#13 @t=3
[DEBUG] Successfully routed ctrl_mov: neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> to tile#13 @t=3
[calculateAward] Operation: %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#12 @t=14
Processing operand: %106 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %106 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=13 to tile#12 @t=14
[calculateAward] Operation: %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#11 @t=15
Processing operand: %88 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %88 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#19 @t=14 to tile#11 @t=15
[calculateAward] Operation: %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#19 @t=15
Processing operand: %77 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %77 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#29 @t=12 to tile#19 @t=15
[calculateAward] Operation: %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#19 @t=16
Processing operand: %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#19 @t=14 to tile#19 @t=16
Processing operand: %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=15 to tile#19 @t=16
[DEBUG] Found ctrl_mov user: neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[tryRouteBackwardMove] src_loc: tile#19 @t=16, dst_loc: tile#18 @t=12
[DEBUG] Successfully routed ctrl_mov: neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> to tile#18 @t=12
[calculateAward] Operation: %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 1
[DEBUG] Schedule op %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#10 @t=16
Processing operand: %104 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %104 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#18 @t=15 to tile#10 @t=16
[calculateAward] Operation: %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1>; Producers: 1
[DEBUG] Schedule op %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1> onto loc: tile#10 @t=15
Processing operand: %92 = "neura.data_mov"(%91) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %92 = "neura.data_mov"(%91) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#11 @t=14 to tile#10 @t=15
[calculateAward] Operation: %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1>; Producers: 1
[DEBUG] Schedule op %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1> onto loc: tile#3 @t=15
Processing operand: %81 = "neura.data_mov"(%80) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %81 = "neura.data_mov"(%80) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#4 @t=14 to tile#3 @t=15
[calculateAward] Operation: %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1>; Producers: 1
[DEBUG] Schedule op %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1> onto loc: tile#20 @t=15
Processing operand: %108 = "neura.data_mov"(%107) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %108 = "neura.data_mov"(%107) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#12 @t=14 to tile#20 @t=15
[calculateAward] Operation: %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#11 @t=16
Processing operand: %94 = "neura.data_mov"(%89) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %94 = "neura.data_mov"(%89) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#11 @t=15 to tile#11 @t=16
Processing operand: %95 = "neura.data_mov"(%93) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[DEBUG] Successfully routed data move: %95 = "neura.data_mov"(%93) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> from tile#10 @t=15 to tile#11 @t=16
[calculateAward] Operation: %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#11 @t=17
Processing operand: %83 = "neura.data_mov"(%78) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %83 = "neura.data_mov"(%78) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#19 @t=15 to tile#11 @t=17
Processing operand: %84 = "neura.data_mov"(%82) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[DEBUG] Successfully routed data move: %84 = "neura.data_mov"(%82) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> from tile#3 @t=15 to tile#11 @t=17
[calculateAward] Operation: %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>; Producers: 2
[DEBUG] Schedule op %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> onto loc: tile#12 @t=18
Processing operand: %110 = "neura.data_mov"(%105) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %110 = "neura.data_mov"(%105) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#10 @t=16 to tile#12 @t=18
Processing operand: %111 = "neura.data_mov"(%109) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[DEBUG] Successfully routed data move: %111 = "neura.data_mov"(%109) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> from tile#20 @t=15 to tile#12 @t=18
[calculateAward] Operation: %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#23 @t=17
Processing operand: %128 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %128 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=14 to tile#23 @t=17
[calculateAward] Operation: %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#10 @t=17
Processing operand: %97 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %97 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#11 @t=16 to tile#10 @t=17
[calculateAward] Operation: %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#19 @t=18
Processing operand: %86 = "neura.data_mov"(%85) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %86 = "neura.data_mov"(%85) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#11 @t=17 to tile#19 @t=18
[calculateAward] Operation: %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> onto loc: tile#12 @t=19
Processing operand: %113 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %113 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#12 @t=18 to tile#12 @t=19
[calculateAward] Operation: %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1>; Producers: 0
[DEBUG] Schedule op %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1> onto loc: tile#55 @t=18
[calculateAward] Operation: %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1>; Producers: 0
[DEBUG] Schedule op %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1> onto loc: tile#10 @t=18
[calculateAward] Operation: %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1>; Producers: 0
[DEBUG] Schedule op %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1> onto loc: tile#42 @t=18
[calculateAward] Operation: %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1> onto loc: tile#15 @t=18
Processing operand: %130 = "neura.data_mov"(%129) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %130 = "neura.data_mov"(%129) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#23 @t=17 to tile#15 @t=18
[calculateAward] Operation: %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>; Producers: 2
[DEBUG] Schedule op %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1> onto loc: tile#11 @t=19
Processing operand: %99 = "neura.data_mov"(%98) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %99 = "neura.data_mov"(%98) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#10 @t=17 to tile#11 @t=19
Processing operand: %100 = "neura.data_mov"(%87) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %100 = "neura.data_mov"(%87) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#19 @t=18 to tile#11 @t=19
[calculateAward] Operation: %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>; Producers: 1
[DEBUG] Schedule op %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1> onto loc: tile#20 @t=20
Processing operand: %115 = "neura.data_mov"(%114) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %115 = "neura.data_mov"(%114) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#12 @t=19 to tile#20 @t=20
[calculateAward] Operation: "neura.return"() : () -> (); Producers: 0
[DEBUG] Schedule op "neura.return"() : () -> () onto loc: tile#38 @t=19
[calculateAward] Operation: "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#54 @t=19
Processing operand: %16 = "neura.data_mov"(%0) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %16 = "neura.data_mov"(%0) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#55 @t=18 to tile#54 @t=19
Processing operand: %17 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %17 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#30 @t=4 to tile#54 @t=19
[calculateAward] Operation: "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#9 @t=19
Processing operand: %18 = "neura.data_mov"(%1) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %18 = "neura.data_mov"(%1) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#10 @t=18 to tile#9 @t=19
Processing operand: %19 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %19 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#19 @t=10 to tile#9 @t=19
[calculateAward] Operation: "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#43 @t=19
Processing operand: %20 = "neura.data_mov"(%3) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %20 = "neura.data_mov"(%3) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#42 @t=18 to tile#43 @t=19
Processing operand: %21 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %21 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#6 @t=1 to tile#43 @t=19
[calculateAward] Operation: "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#23 @t=19
Processing operand: %132 = "neura.data_mov"(%131) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %132 = "neura.data_mov"(%131) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#15 @t=18 to tile#23 @t=19
Processing operand: %133 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %133 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#13 @t=14 to tile#23 @t=19
[calculateAward] Operation: "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#12 @t=20
Processing operand: %102 = "neura.data_mov"(%101) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %102 = "neura.data_mov"(%101) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#11 @t=19 to tile#12 @t=20
Processing operand: %103 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %103 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#11 @t=16 to tile#12 @t=20
[calculateAward] Operation: "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> (); Producers: 2
[DEBUG] Schedule op "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () onto loc: tile#20 @t=21
Processing operand: %117 = "neura.data_mov"(%116) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[DEBUG] Successfully routed data move: %117 = "neura.data_mov"(%116) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> from tile#20 @t=20 to tile#20 @t=21
Processing operand: %118 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[DEBUG] Successfully routed data move: %118 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> from tile#12 @t=18 to tile#20 @t=21
=== MappingState: op_to_locs ===
  - neura.store
      -> tile#23 @t=19
  - neura.data_mov
      -> link#51 @t=18
  - neura.ctrl_mov
      -> register#416 @t=14
  - neura.ctrl_mov
      -> register#929 @t=14
      -> register#929 @t=15
      -> register#929 @t=16
      -> register#929 @t=17
  - neura.grant_predicate
      -> tile#29 @t=7
  - neura.add
      -> tile#11 @t=19
  - neura.return
      -> tile#38 @t=19
  - neura.data_mov
      -> link#16 @t=2
  - neura.constant
      -> tile#55 @t=18
  - neura.grant_predicate
      -> tile#19 @t=14
  - neura.constant
      -> tile#10 @t=18
  - neura.grant_predicate
      -> tile#13 @t=6
  - neura.constant
      -> tile#42 @t=18
  - neura.gep
      -> tile#21 @t=9
  - neura.grant_predicate
      -> tile#29 @t=12
  - neura.data_mov
      -> link#103 @t=8
  - neura.store
      -> tile#20 @t=21
  - neura.store
      -> tile#9 @t=19
  - neura.grant_predicate
      -> tile#13 @t=12
  - neura.data_mov
      -> register#928 @t=7
  - neura.data_mov
      -> register#416 @t=6
  - neura.grant_predicate
      -> tile#29 @t=13
  - neura.data_mov
      -> register#576 @t=12
  - neura.data_mov
      -> register#672 @t=9
  - neura.data_mov
      -> link#101 @t=12
      -> link#97 @t=13
      -> link#95 @t=14
  - neura.data_mov
      -> link#43 @t=12
      -> link#14 @t=13
  - neura.gep
      -> tile#11 @t=17
  - neura.data_mov
      -> link#36 @t=17
  - neura.data_mov
      -> link#65 @t=14
  - neura.data_mov
      -> link#41 @t=12
      -> link#37 @t=13
  - neura.data_mov
      -> register#352 @t=15
  - neura.gep
      -> tile#11 @t=16
  - neura.store
      -> tile#43 @t=19
  - neura.data_mov
      -> link#41 @t=13
  - neura.phi
      -> tile#13 @t=3
  - neura.grant_predicate
      -> tile#18 @t=13
  - neura.data_mov
      -> link#42 @t=14
      -> link#46 @t=15
      -> link#51 @t=16
  - neura.ctrl_mov
      -> link#63 @t=16
      -> register#578 @t=17
      -> register#578 @t=18
      -> register#578 @t=19
      -> register#578 @t=20
      -> register#578 @t=21
      -> register#578 @t=22
      -> register#578 @t=23
  - neura.grant_predicate
      -> tile#18 @t=15
  - neura.grant_predicate
      -> tile#13 @t=13
  - neura.data_mov
      -> register#930 @t=7
      -> register#930 @t=8
      -> register#930 @t=9
      -> register#930 @t=10
      -> register#930 @t=11
      -> register#930 @t=12
  - neura.constant
      -> tile#5 @t=0
  - neura.data_mov
      -> link#16 @t=0
      -> link#42 @t=1
      -> link#48 @t=2
      -> link#78 @t=3
  - neura.store
      -> tile#12 @t=20
  - neura.data_mov
      -> register#384 @t=18
  - neura.data_mov
      -> link#30 @t=16
      -> link#34 @t=17
  - neura.data_mov
      -> link#61 @t=15
  - neura.data_mov
      -> link#34 @t=19
  - neura.data_mov
      -> link#65 @t=15
      -> register#352 @t=16
  - neura.data_mov
      -> register#416 @t=3
  - neura.store
      -> tile#54 @t=19
  - neura.data_mov
      -> link#63 @t=10
  - neura.data_mov
      -> link#105 @t=4
  - neura.sext
      -> tile#20 @t=15
  - neura.load
      -> tile#12 @t=14
  - neura.load
      -> tile#10 @t=16
  - neura.data_mov
      -> link#34 @t=16
      -> register#385 @t=17
      -> register#385 @t=18
      -> register#385 @t=19
  - neura.data_mov
      -> link#30 @t=17
      -> register#352 @t=18
  - neura.data_mov
      -> link#65 @t=18
  - neura.data_mov
      -> link#33 @t=16
  - neura.load
      -> tile#10 @t=17
  - neura.data_mov
      -> link#30 @t=15
  - neura.data_mov
      -> link#33 @t=14
  - neura.sext
      -> tile#10 @t=15
  - neura.load
      -> tile#11 @t=14
  - neura.load
      -> tile#11 @t=15
  - neura.load
      -> tile#19 @t=18
  - neura.data_mov
      -> link#10 @t=15
      -> register#353 @t=16
  - neura.data_mov
      -> link#11 @t=14
  - neura.sext
      -> tile#3 @t=15
  - neura.data_mov
      -> link#14 @t=0
      -> link#11 @t=1
      -> link#10 @t=2
      -> link#36 @t=3
      -> register#608 @t=4
      -> register#608 @t=5
      -> register#608 @t=6
      -> register#608 @t=7
      -> register#608 @t=8
      -> register#608 @t=9
  - neura.data_mov
      -> link#15 @t=0
  - neura.data_mov
      -> link#60 @t=13
  - neura.data_mov
      -> register#416 @t=12
      -> register#416 @t=13
  - neura.phi
      -> tile#29 @t=6
  - neura.phi
      -> tile#18 @t=12
  - neura.phi
      -> tile#29 @t=14
  - neura.phi
      -> tile#19 @t=16
  - neura.gep
      -> tile#12 @t=18
  - neura.data_mov
      -> link#44 @t=14
      -> link#72 @t=15
      -> link#76 @t=16
      -> register#736 @t=17
      -> register#736 @t=18
  - neura.data_mov
      -> link#80 @t=17
  - neura.add
      -> tile#15 @t=18
  - neura.load
      -> tile#23 @t=17
  - neura.data_mov
      -> register#417 @t=13
  - neura.phi
      -> tile#13 @t=14
  - neura.data_mov
      -> register#928 @t=12
      -> register#928 @t=13
  - neura.data_mov
      -> register#929 @t=13
  - neura.data_mov
      -> register#608 @t=14
      -> register#608 @t=15
  - neura.data_mov
      -> link#60 @t=15
  - neura.data_mov
      -> register#640 @t=20
  - neura.data_mov
      -> link#40 @t=18
      -> register#641 @t=19
      -> register#641 @t=20
  - neura.data_mov
      -> link#40 @t=19
  - neura.add
      -> tile#20 @t=20
  - neura.load
      -> tile#12 @t=19
  - neura.data_mov
      -> link#69 @t=15
      -> register#384 @t=16
      -> register#384 @t=17
  - neura.data_mov
      -> link#40 @t=14
  - neura.load
      -> tile#4 @t=14
  - neura.load
      -> tile#19 @t=15
  - neura.data_mov
      -> link#74 @t=12
  - neura.data_mov
      -> register#418 @t=6
      -> register#418 @t=7
      -> register#418 @t=8
      -> register#418 @t=9
      -> register#418 @t=10
      -> register#418 @t=11
      -> register#418 @t=12
  - neura.data_mov
      -> link#73 @t=12
  - neura.data_mov
      -> register#576 @t=13
      -> register#576 @t=14
  - neura.data_mov
      -> link#71 @t=12
      -> link#67 @t=13
      -> link#63 @t=14
  - neura.data_mov
      -> register#672 @t=11
  - neura.not
      -> tile#21 @t=12
  - neura.data_mov
      -> link#71 @t=11
      -> link#67 @t=12
      -> register#608 @t=13
  - neura.data_mov
      -> register#417 @t=6
      -> register#417 @t=7
      -> register#417 @t=8
      -> register#417 @t=9
      -> register#417 @t=10
      -> register#417 @t=11
  - neura.data_mov
      -> link#73 @t=11
  - neura.data_mov
      -> register#929 @t=7
      -> register#929 @t=8
      -> register#929 @t=9
      -> register#929 @t=10
      -> register#929 @t=11
  - neura.data_mov
      -> link#74 @t=11
  - neura.data_mov
      -> register#672 @t=10
  - neura.icmp
      -> tile#21 @t=11
  - neura.load
      -> tile#21 @t=10
  - neura.data_mov
      -> link#44 @t=8
  - neura.data_mov
      -> register#416 @t=7
  - neura.sext
      -> tile#13 @t=8
  - neura.load
      -> tile#13 @t=7
  - neura.load
      -> tile#29 @t=8
  - neura.data_mov
      -> link#41 @t=5
      -> link#37 @t=6
      -> link#33 @t=7
      -> link#32 @t=8
      -> register#577 @t=9
      -> register#577 @t=10
      -> register#577 @t=11
      -> register#577 @t=12
  - neura.data_mov
      -> register#417 @t=3
      -> register#417 @t=4
      -> register#417 @t=5
  - neura.data_mov
      -> register#416 @t=5
  - neura.data_mov
      -> register#928 @t=6
  - neura.data_mov
      -> link#44 @t=5
      -> link#74 @t=6
  - neura.data_mov
      -> register#416 @t=4
  - neura.icmp
      -> tile#13 @t=5
  - neura.load
      -> tile#13 @t=4
  - neura.data_mov
      -> register#928 @t=5
  - neura.data_mov
      -> register#576 @t=11
  - neura.data_mov
      -> link#150 @t=18
  - neura.data_mov
      -> link#19 @t=1
      -> link#45 @t=2
      -> link#41 @t=3
      -> link#40 @t=4
      -> link#67 @t=5
      -> link#66 @t=6
      -> link#96 @t=7
      -> link#126 @t=8
      -> register#1376 @t=9
      -> register#1376 @t=10
      -> register#1376 @t=11
      -> register#1376 @t=12
      -> register#1376 @t=13
      -> register#1376 @t=14
      -> register#1376 @t=15
      -> register#1376 @t=16
      -> register#1376 @t=17
      -> register#1376 @t=18
  - neura.data_mov
      -> link#29 @t=18
  - neura.data_mov
      -> link#65 @t=10
      -> link#33 @t=11
      -> link#29 @t=12
      -> register#288 @t=13
      -> register#288 @t=14
      -> register#288 @t=15
      -> register#288 @t=16
      -> register#288 @t=17
      -> register#288 @t=18
  - neura.data_mov
      -> link#199 @t=18
  - neura.data_mov
      -> link#108 @t=4
      -> link#138 @t=5
      -> link#168 @t=6
      -> register#1728 @t=7
      -> register#1728 @t=8
      -> register#1728 @t=9
      -> register#1728 @t=10
      -> register#1728 @t=11
      -> register#1728 @t=12
      -> register#1728 @t=13
      -> register#1728 @t=14
      -> register#1728 @t=15
      -> register#1728 @t=16
      -> register#1728 @t=17
      -> register#1728 @t=18
  - neura.data_mov
      -> link#17 @t=1
  - neura.grant_once
      -> tile#5 @t=2
  - neura.alloca
      -> tile#6 @t=1
  - neura.grant_once
      -> tile#18 @t=11
  - neura.alloca
      -> tile#19 @t=10
  - neura.grant_once
      -> tile#29 @t=5
  - neura.alloca
      -> tile#30 @t=4
=== End ===
[DEBUG] Recurrence cycle (length 4):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 6):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 10):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 9):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 11):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 4):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 6):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 11):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 10):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 12):
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 4):
  %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 8):
  %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 4):
  %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 9):
  %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 4):
  %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[DEBUG] Recurrence cycle (length 4):
  %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Longest recurrence cycle (length 12):
%28 = neura.reserve : !neura.data<!llvm.ptr, i1>
%30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
%31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
%32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
%33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
%34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
%39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
%40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
%46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
%47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
%48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
%49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
%51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
%52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
%53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
%54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
%55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
%56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
%66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
%67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
%72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
%73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
%126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
%127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.return"() : () -> ()
[MapToAcceleratorPass] Topologically sorted op: %16 = "neura.data_mov"(%0) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %18 = "neura.data_mov"(%1) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %4 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %8 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %12 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %20 = "neura.data_mov"(%3) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %17 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %6 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %19 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %10 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %21 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %14 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] Topologically sorted op: %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] Topologically sorted op: %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] Topologically sorted op: %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %26 = "neura.data_mov"(%7) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %23 = "neura.data_mov"(%11) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %29 = "neura.data_mov"(%15) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %42 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %64 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %69 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] Topologically sorted op: %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %88 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %90 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %79 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %77 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %106 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %104 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %94 = "neura.data_mov"(%89) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %92 = "neura.data_mov"(%91) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %81 = "neura.data_mov"(%80) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %83 = "neura.data_mov"(%78) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %133 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %128 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %108 = "neura.data_mov"(%107) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %110 = "neura.data_mov"(%105) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %95 = "neura.data_mov"(%93) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %84 = "neura.data_mov"(%82) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %130 = "neura.data_mov"(%129) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %111 = "neura.data_mov"(%109) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] Topologically sorted op: %103 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %97 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %86 = "neura.data_mov"(%85) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %132 = "neura.data_mov"(%131) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %118 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %113 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] Topologically sorted op: %99 = "neura.data_mov"(%98) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %100 = "neura.data_mov"(%87) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] Topologically sorted op: %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %115 = "neura.data_mov"(%114) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %102 = "neura.data_mov"(%101) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] Topologically sorted op: %117 = "neura.data_mov"(%116) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] Topologically sorted op: "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] ALAP Bucket Level 0: 2 ops
  %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1>
  %12 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 1: 2 ops
  %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
  %14 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 2: 3 ops
  %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %29 = "neura.data_mov"(%15) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 3: 4 ops
  %4 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 4: 4 ops
  %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
  %6 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 5: 6 ops
  %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %26 = "neura.data_mov"(%7) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] ALAP Bucket Level 6: 6 ops
  %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 7: 6 ops
  %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 8: 4 ops
  %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] ALAP Bucket Level 9: 3 ops
  %8 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 10: 4 ops
  %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
  %10 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 11: 7 ops
  %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
  %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %23 = "neura.data_mov"(%11) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
  %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[MapToAcceleratorPass] ALAP Bucket Level 12: 10 ops
  %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %42 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 13: 12 ops
  %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %64 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %69 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
  %90 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %79 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %106 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 14: 17 ops
  %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %88 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %77 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
  %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %104 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %92 = "neura.data_mov"(%91) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %81 = "neura.data_mov"(%80) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
  neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
  %108 = "neura.data_mov"(%107) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 15: 14 ops
  %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %94 = "neura.data_mov"(%89) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %83 = "neura.data_mov"(%78) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
  %110 = "neura.data_mov"(%105) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %95 = "neura.data_mov"(%93) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %84 = "neura.data_mov"(%82) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
  %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1>
  %111 = "neura.data_mov"(%109) : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
[MapToAcceleratorPass] ALAP Bucket Level 16: 7 ops
  %128 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %97 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %86 = "neura.data_mov"(%85) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
  %113 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[MapToAcceleratorPass] ALAP Bucket Level 17: 8 ops
  %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %130 = "neura.data_mov"(%129) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %99 = "neura.data_mov"(%98) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %100 = "neura.data_mov"(%87) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
  %115 = "neura.data_mov"(%114) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 18: 18 ops
  %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1>
  %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1>
  %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1>
  %16 = "neura.data_mov"(%0) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %18 = "neura.data_mov"(%1) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %20 = "neura.data_mov"(%3) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %17 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %19 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %21 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %133 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %103 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %132 = "neura.data_mov"(%131) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %118 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
  %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>
  %102 = "neura.data_mov"(%101) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
  %117 = "neura.data_mov"(%116) : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[MapToAcceleratorPass] ALAP Bucket Level 19: 7 ops
  "neura.return"() : () -> ()
  "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
  "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
  "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
  "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
  "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
  "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[MapToAcceleratorPass] ALAP sorted op: %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1> (ALAP level: 0)
[MapToAcceleratorPass] ALAP sorted op: %12 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 0)
[MapToAcceleratorPass] ALAP sorted op: %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 1)
[MapToAcceleratorPass] ALAP sorted op: %14 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 1)
[MapToAcceleratorPass] ALAP sorted op: %28 = neura.reserve : !neura.data<!llvm.ptr, i1> (ALAP level: 2)
[MapToAcceleratorPass] ALAP sorted op: %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 2)
[MapToAcceleratorPass] ALAP sorted op: %29 = "neura.data_mov"(%15) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 2)
[MapToAcceleratorPass] ALAP sorted op: %4 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 3)
[MapToAcceleratorPass] ALAP sorted op: %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 3)
[MapToAcceleratorPass] ALAP sorted op: %38 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 3)
[MapToAcceleratorPass] ALAP sorted op: %31 = "neura.data_mov"(%30) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 3)
[MapToAcceleratorPass] ALAP sorted op: %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 4)
[MapToAcceleratorPass] ALAP sorted op: %6 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 4)
[MapToAcceleratorPass] ALAP sorted op: %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 4)
[MapToAcceleratorPass] ALAP sorted op: %33 = "neura.data_mov"(%32) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 4)
[MapToAcceleratorPass] ALAP sorted op: %25 = neura.reserve : !neura.data<!llvm.ptr, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %26 = "neura.data_mov"(%7) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %39 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %36 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 5)
[MapToAcceleratorPass] ALAP sorted op: %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %35 = "neura.data_mov"(%27) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %71 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %60 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %46 = "neura.data_mov"(%40) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 6)
[MapToAcceleratorPass] ALAP sorted op: %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %74 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %57 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %44 = "neura.data_mov"(%37) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %48 = "neura.data_mov"(%47) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 7)
[MapToAcceleratorPass] ALAP sorted op: %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 8)
[MapToAcceleratorPass] ALAP sorted op: %50 = "neura.data_mov"(%45) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 8)
[MapToAcceleratorPass] ALAP sorted op: %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1> (ALAP level: 8)
[MapToAcceleratorPass] ALAP sorted op: %51 = "neura.data_mov"(%49) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> (ALAP level: 8)
[MapToAcceleratorPass] ALAP sorted op: %8 = "neura.data_mov"(%2) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 9)
[MapToAcceleratorPass] ALAP sorted op: %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 9)
[MapToAcceleratorPass] ALAP sorted op: %53 = "neura.data_mov"(%52) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 9)
[MapToAcceleratorPass] ALAP sorted op: %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 10)
[MapToAcceleratorPass] ALAP sorted op: %10 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 10)
[MapToAcceleratorPass] ALAP sorted op: %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 10)
[MapToAcceleratorPass] ALAP sorted op: %55 = "neura.data_mov"(%54) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 10)
[MapToAcceleratorPass] ALAP sorted op: %22 = neura.reserve : !neura.data<!llvm.ptr, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %23 = "neura.data_mov"(%11) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %66 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %61 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %58 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 11)
[MapToAcceleratorPass] ALAP sorted op: %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %41 = "neura.data_mov"(%24) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %42 = "neura.data_mov"(%34) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %75 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %72 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %125 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %122 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 12)
[MapToAcceleratorPass] ALAP sorted op: %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %68 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %63 = "neura.data_mov"(%43) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %64 = "neura.data_mov"(%56) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %69 = "neura.data_mov"(%67) : (!neura.data<i1, i1>) -> !neura.data<i1, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %90 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %79 = "neura.data_mov"(%62) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %123 = "neura.data_mov"(%76) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %126 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %106 = "neura.data_mov"(%73) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 13)
[MapToAcceleratorPass] ALAP sorted op: %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %119 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %88 = "neura.data_mov"(%65) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %77 = "neura.data_mov"(%59) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %120 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %104 = "neura.data_mov"(%70) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %92 = "neura.data_mov"(%91) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %81 = "neura.data_mov"(%80) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: neura.ctrl_mov %124 -> %25 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: neura.ctrl_mov %127 -> %28 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %108 = "neura.data_mov"(%107) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 14)
[MapToAcceleratorPass] ALAP sorted op: %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %94 = "neura.data_mov"(%89) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %83 = "neura.data_mov"(%78) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: neura.ctrl_mov %121 -> %22 : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %110 = "neura.data_mov"(%105) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %95 = "neura.data_mov"(%93) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %84 = "neura.data_mov"(%82) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %111 = "neura.data_mov"(%109) : (!neura.data<i64, i1>) -> !neura.data<i64, i1> (ALAP level: 15)
[MapToAcceleratorPass] ALAP sorted op: %128 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %97 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %86 = "neura.data_mov"(%85) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %113 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 16)
[MapToAcceleratorPass] ALAP sorted op: %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %130 = "neura.data_mov"(%129) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %99 = "neura.data_mov"(%98) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %100 = "neura.data_mov"(%87) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %115 = "neura.data_mov"(%114) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 17)
[MapToAcceleratorPass] ALAP sorted op: %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %16 = "neura.data_mov"(%0) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %18 = "neura.data_mov"(%1) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %20 = "neura.data_mov"(%3) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %17 = "neura.data_mov"(%5) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %19 = "neura.data_mov"(%9) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %21 = "neura.data_mov"(%13) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %133 = "neura.data_mov"(%127) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %103 = "neura.data_mov"(%96) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %132 = "neura.data_mov"(%131) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %118 = "neura.data_mov"(%112) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %102 = "neura.data_mov"(%101) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: %117 = "neura.data_mov"(%116) : (!neura.data<i32, i1>) -> !neura.data<i32, i1> (ALAP level: 18)
[MapToAcceleratorPass] ALAP sorted op: "neura.return"() : () -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
[MapToAcceleratorPass] ALAP sorted op: "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> () (ALAP level: 19)
---------------------------------------------------------
[HeuristicMapping] Starting mapping with 144 operations.
Configuration: MAX Backtrack Depth = 1, MAX Candidate Locations = 1
[HeuristicMapping] Filtered 84 non-materialized operations, 60 operations require physical mapping.
[HeuristicMapping] Found 768 candidate locations for operation: %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#5 @t=0
[HeuristicMapping] Successfully mapped operation %2 = "neura.constant"() <{value = 1 : i32}> : () -> !neura.data<i32, i1>
[HeuristicMapping] Found 462 candidate locations for operation: %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#6 @t=1
[tryRouteDataMove] Routing from Tile#5 @t=0 to Tile#6 @t=1
[HeuristicMapping] Successfully mapped operation %13 = neura.alloca %12 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 429 candidate locations for operation: %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#5 @t=2
[tryRouteDataMove] Routing from Tile#6 @t=1 to Tile#5 @t=2
[HeuristicMapping] Successfully mapped operation %15 = "neura.grant_once"(%14) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 460 candidate locations for operation: %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=3
[tryRouteDataMove] Routing from Tile#5 @t=2 to Tile#13 @t=3
[HeuristicMapping] Successfully mapped operation %30 = "neura.phi"(%28, %29) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 623 candidate locations for operation: %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#30 @t=4
[tryRouteDataMove] Routing from Tile#5 @t=0 to Tile#30 @t=4
[HeuristicMapping] Successfully mapped operation %5 = neura.alloca %4 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 507 candidate locations for operation: %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=4
[tryRouteDataMove] Routing from Tile#13 @t=3 to Tile#13 @t=4
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %32 = "neura.load"(%31) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 521 candidate locations for operation: %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=5
[tryRouteDataMove] Routing from Tile#30 @t=4 to Tile#29 @t=5
[HeuristicMapping] Successfully mapped operation %7 = "neura.grant_once"(%6) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 505 candidate locations for operation: %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=5
[tryRouteDataMove] Routing from Tile#13 @t=4 to Tile#13 @t=5
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Found 551 candidate locations for operation: %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=6
[tryRouteDataMove] Routing from Tile#29 @t=5 to Tile#29 @t=6
[tryRouteDataMove] Successfully routed on same tile using Register #928
[HeuristicMapping] Successfully mapped operation %27 = "neura.phi"(%25, %26) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 503 candidate locations for operation: %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=6
[tryRouteDataMove] Routing from Tile#13 @t=3 to Tile#13 @t=6
[tryRouteDataMove] Successfully routed on same tile using Register #417
[tryRouteDataMove] Routing from Tile#13 @t=5 to Tile#13 @t=6
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %40 = neura.grant_predicate %38, %39 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 510 candidate locations for operation: %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=7
[tryRouteDataMove] Routing from Tile#29 @t=6 to Tile#29 @t=7
[tryRouteDataMove] Successfully routed on same tile using Register #928
[tryRouteDataMove] Routing from Tile#13 @t=5 to Tile#29 @t=7
[HeuristicMapping] Successfully mapped operation %37 = neura.grant_predicate %35, %36 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 501 candidate locations for operation: %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=7
[tryRouteDataMove] Routing from Tile#13 @t=6 to Tile#13 @t=7
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %47 = "neura.load"(%46) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 547 candidate locations for operation: %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=8
[tryRouteDataMove] Routing from Tile#29 @t=7 to Tile#29 @t=8
[tryRouteDataMove] Successfully routed on same tile using Register #928
[HeuristicMapping] Successfully mapped operation %45 = "neura.load"(%44) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 499 candidate locations for operation: %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=8
[tryRouteDataMove] Routing from Tile#13 @t=7 to Tile#13 @t=8
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %49 = neura.sext %48 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Found 466 candidate locations for operation: %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#21 @t=9
[tryRouteDataMove] Routing from Tile#29 @t=8 to Tile#21 @t=9
[tryRouteDataMove] Routing from Tile#13 @t=8 to Tile#21 @t=9
[HeuristicMapping] Successfully mapped operation %52 = "neura.gep"(%50, %51) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 748 candidate locations for operation: %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#19 @t=10
[tryRouteDataMove] Routing from Tile#5 @t=0 to Tile#19 @t=10
[HeuristicMapping] Successfully mapped operation %9 = neura.alloca %8 : !neura.data<i32, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 528 candidate locations for operation: %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#21 @t=10
[tryRouteDataMove] Routing from Tile#21 @t=9 to Tile#21 @t=10
[tryRouteDataMove] Successfully routed on same tile using Register #672
[HeuristicMapping] Successfully mapped operation %54 = "neura.load"(%53) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 544 candidate locations for operation: %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#18 @t=11
[tryRouteDataMove] Routing from Tile#19 @t=10 to Tile#18 @t=11
[HeuristicMapping] Successfully mapped operation %11 = "neura.grant_once"(%10) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 526 candidate locations for operation: %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#21 @t=11
[tryRouteDataMove] Routing from Tile#21 @t=10 to Tile#21 @t=11
[tryRouteDataMove] Successfully routed on same tile using Register #672
[HeuristicMapping] Successfully mapped operation %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Found 527 candidate locations for operation: %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#18 @t=12
[tryRouteDataMove] Routing from Tile#18 @t=11 to Tile#18 @t=12
[tryRouteDataMove] Successfully routed on same tile using Register #576
[HeuristicMapping] Successfully mapped operation %24 = "neura.phi"(%22, %23) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 526 candidate locations for operation: %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#21 @t=12
[tryRouteDataMove] Routing from Tile#21 @t=11 to Tile#21 @t=12
[tryRouteDataMove] Successfully routed on same tile using Register #672
[HeuristicMapping] Successfully mapped operation %67 = "neura.not"(%66) : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
[HeuristicMapping] Found 525 candidate locations for operation: %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=12
[tryRouteDataMove] Routing from Tile#13 @t=6 to Tile#13 @t=12
[tryRouteDataMove] Successfully routed on same tile using Register #417
[tryRouteDataMove] Routing from Tile#21 @t=11 to Tile#13 @t=12
[HeuristicMapping] Successfully mapped operation %62 = neura.grant_predicate %60, %61 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 522 candidate locations for operation: %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=12
[tryRouteDataMove] Routing from Tile#29 @t=7 to Tile#29 @t=12
[tryRouteDataMove] Successfully routed on same tile using Register #929
[tryRouteDataMove] Routing from Tile#21 @t=11 to Tile#29 @t=12
[HeuristicMapping] Successfully mapped operation %59 = neura.grant_predicate %57, %58 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 524 candidate locations for operation: %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#18 @t=13
[tryRouteDataMove] Routing from Tile#18 @t=12 to Tile#18 @t=13
[tryRouteDataMove] Successfully routed on same tile using Register #576
[tryRouteDataMove] Routing from Tile#13 @t=5 to Tile#18 @t=13
[HeuristicMapping] Successfully mapped operation %43 = neura.grant_predicate %41, %42 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 521 candidate locations for operation: %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=13
[tryRouteDataMove] Routing from Tile#29 @t=7 to Tile#29 @t=13
[tryRouteDataMove] Successfully routed on same tile using Register #930
[tryRouteDataMove] Routing from Tile#21 @t=12 to Tile#29 @t=13
[HeuristicMapping] Successfully mapped operation %76 = neura.grant_predicate %74, %75 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 511 candidate locations for operation: %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=13
[tryRouteDataMove] Routing from Tile#13 @t=6 to Tile#13 @t=13
[tryRouteDataMove] Successfully routed on same tile using Register #418
[tryRouteDataMove] Routing from Tile#21 @t=12 to Tile#13 @t=13
[HeuristicMapping] Successfully mapped operation %73 = neura.grant_predicate %71, %72 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 498 candidate locations for operation: %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#19 @t=14
[tryRouteDataMove] Routing from Tile#18 @t=13 to Tile#19 @t=14
[tryRouteDataMove] Routing from Tile#21 @t=11 to Tile#19 @t=14
[HeuristicMapping] Successfully mapped operation %65 = neura.grant_predicate %63, %64 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 464 candidate locations for operation: %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#18 @t=15
[tryRouteDataMove] Routing from Tile#18 @t=13 to Tile#18 @t=15
[tryRouteDataMove] Successfully routed on same tile using Register #576
[tryRouteDataMove] Routing from Tile#21 @t=12 to Tile#18 @t=15
[HeuristicMapping] Successfully mapped operation %70 = neura.grant_predicate %68, %69 : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 544 candidate locations for operation: %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#11 @t=14
[tryRouteDataMove] Routing from Tile#13 @t=12 to Tile#11 @t=14
[HeuristicMapping] Successfully mapped operation %91 = "neura.load"(%90) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 535 candidate locations for operation: %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#4 @t=14
[tryRouteDataMove] Routing from Tile#13 @t=12 to Tile#4 @t=14
[HeuristicMapping] Successfully mapped operation %80 = "neura.load"(%79) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 31 candidate locations for operation: %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#29 @t=14
[tryRouteDataMove] Routing from Tile#29 @t=12 to Tile#29 @t=14
[tryRouteDataMove] Successfully routed on same tile using Register #928
[tryRouteDataMove] Routing from Tile#29 @t=13 to Tile#29 @t=14
[tryRouteDataMove] Successfully routed on same tile using Register #929
[tryRouteDataMove] Routing from Tile#29 @t=14 to Tile#29 @t=18
[tryRouteDataMove] Successfully routed on same tile using Register #929
[HeuristicMapping] Successfully mapped operation %124 = "neura.phi"(%122, %123) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 2 candidate locations for operation: %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#13 @t=14
[tryRouteDataMove] Routing from Tile#13 @t=12 to Tile#13 @t=14
[tryRouteDataMove] Successfully routed on same tile using Register #416
[tryRouteDataMove] Routing from Tile#13 @t=13 to Tile#13 @t=14
[tryRouteDataMove] Successfully routed on same tile using Register #417
[tryRouteDataMove] Routing from Tile#13 @t=14 to Tile#13 @t=15
[tryRouteDataMove] Successfully routed on same tile using Register #416
[HeuristicMapping] Successfully mapped operation %127 = "neura.phi"(%125, %126) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 480 candidate locations for operation: %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#12 @t=14
[tryRouteDataMove] Routing from Tile#13 @t=13 to Tile#12 @t=14
[HeuristicMapping] Successfully mapped operation %107 = "neura.load"(%106) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 524 candidate locations for operation: %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#11 @t=15
[tryRouteDataMove] Routing from Tile#19 @t=14 to Tile#11 @t=15
[HeuristicMapping] Successfully mapped operation %89 = "neura.load"(%88) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 637 candidate locations for operation: %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#19 @t=15
[tryRouteDataMove] Routing from Tile#29 @t=12 to Tile#19 @t=15
[HeuristicMapping] Successfully mapped operation %78 = "neura.load"(%77) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 121 candidate locations for operation: %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#19 @t=16
[tryRouteDataMove] Routing from Tile#19 @t=14 to Tile#19 @t=16
[tryRouteDataMove] Successfully routed on same tile using Register #608
[tryRouteDataMove] Routing from Tile#18 @t=15 to Tile#19 @t=16
[tryRouteDataMove] Routing from Tile#19 @t=16 to Tile#18 @t=24
[HeuristicMapping] Successfully mapped operation %121 = "neura.phi"(%119, %120) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 504 candidate locations for operation: %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#10 @t=16
[tryRouteDataMove] Routing from Tile#18 @t=15 to Tile#10 @t=16
[HeuristicMapping] Successfully mapped operation %105 = "neura.load"(%104) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 494 candidate locations for operation: %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#10 @t=15
[tryRouteDataMove] Routing from Tile#11 @t=14 to Tile#10 @t=15
[HeuristicMapping] Successfully mapped operation %93 = neura.sext %92 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Found 450 candidate locations for operation: %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#3 @t=15
[tryRouteDataMove] Routing from Tile#4 @t=14 to Tile#3 @t=15
[HeuristicMapping] Successfully mapped operation %82 = neura.sext %81 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Found 493 candidate locations for operation: %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#20 @t=15
[tryRouteDataMove] Routing from Tile#12 @t=14 to Tile#20 @t=15
[HeuristicMapping] Successfully mapped operation %109 = neura.sext %108 : !neura.data<i32, i1> -> !neura.data<i64, i1>
[HeuristicMapping] Found 449 candidate locations for operation: %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#11 @t=16
[tryRouteDataMove] Routing from Tile#11 @t=15 to Tile#11 @t=16
[tryRouteDataMove] Successfully routed on same tile using Register #352
[tryRouteDataMove] Routing from Tile#10 @t=15 to Tile#11 @t=16
[HeuristicMapping] Successfully mapped operation %96 = "neura.gep"(%94, %95) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 431 candidate locations for operation: %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#11 @t=17
[tryRouteDataMove] Routing from Tile#19 @t=15 to Tile#11 @t=17
[tryRouteDataMove] Routing from Tile#3 @t=15 to Tile#11 @t=17
[HeuristicMapping] Successfully mapped operation %85 = "neura.gep"(%83, %84) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 458 candidate locations for operation: %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#12 @t=18
[tryRouteDataMove] Routing from Tile#10 @t=16 to Tile#12 @t=18
[tryRouteDataMove] Routing from Tile#20 @t=15 to Tile#12 @t=18
[HeuristicMapping] Successfully mapped operation %112 = "neura.gep"(%110, %111) : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 579 candidate locations for operation: %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#23 @t=17
[tryRouteDataMove] Routing from Tile#13 @t=14 to Tile#23 @t=17
[HeuristicMapping] Successfully mapped operation %129 = "neura.load"(%128) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 488 candidate locations for operation: %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#10 @t=17
[tryRouteDataMove] Routing from Tile#11 @t=16 to Tile#10 @t=17
[HeuristicMapping] Successfully mapped operation %98 = "neura.load"(%97) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 481 candidate locations for operation: %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#19 @t=18
[tryRouteDataMove] Routing from Tile#11 @t=17 to Tile#19 @t=18
[HeuristicMapping] Successfully mapped operation %87 = "neura.load"(%86) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 475 candidate locations for operation: %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#12 @t=19
[tryRouteDataMove] Routing from Tile#12 @t=18 to Tile#12 @t=19
[tryRouteDataMove] Successfully routed on same tile using Register #384
[HeuristicMapping] Successfully mapped operation %114 = "neura.load"(%113) : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 721 candidate locations for operation: %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#55 @t=18
[HeuristicMapping] Successfully mapped operation %0 = "neura.constant"() <{value = "%arg0"}> : () -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 720 candidate locations for operation: %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#10 @t=18
[HeuristicMapping] Successfully mapped operation %1 = "neura.constant"() <{value = "%arg1"}> : () -> !neura.data<!llvm.ptr, i1>
[HeuristicMapping] Found 719 candidate locations for operation: %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#42 @t=18
[HeuristicMapping] Successfully mapped operation %3 = "neura.constant"() <{value = 0 : i32}> : () -> !neura.data<i32, i1>
[HeuristicMapping] Found 423 candidate locations for operation: %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#15 @t=18
[tryRouteDataMove] Routing from Tile#23 @t=17 to Tile#15 @t=18
[HeuristicMapping] Successfully mapped operation %131 = "neura.add"(%130) {rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 484 candidate locations for operation: %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#11 @t=19
[tryRouteDataMove] Routing from Tile#10 @t=17 to Tile#11 @t=19
[tryRouteDataMove] Routing from Tile#19 @t=18 to Tile#11 @t=19
[HeuristicMapping] Successfully mapped operation %101 = "neura.add"(%99, %100) : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 476 candidate locations for operation: %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Trying candidate 1/1 at tile#20 @t=20
[tryRouteDataMove] Routing from Tile#12 @t=19 to Tile#20 @t=20
[HeuristicMapping] Successfully mapped operation %116 = "neura.add"(%115) {rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
[HeuristicMapping] Found 715 candidate locations for operation: "neura.return"() : () -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#38 @t=19
[HeuristicMapping] Successfully mapped operation "neura.return"() : () -> ()
[HeuristicMapping] Found 398 candidate locations for operation: "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#54 @t=19
[tryRouteDataMove] Routing from Tile#55 @t=18 to Tile#54 @t=19
[tryRouteDataMove] Routing from Tile#30 @t=4 to Tile#54 @t=19
[HeuristicMapping] Successfully mapped operation "neura.store"(%16, %17) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Found 465 candidate locations for operation: "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#9 @t=19
[tryRouteDataMove] Routing from Tile#10 @t=18 to Tile#9 @t=19
[tryRouteDataMove] Routing from Tile#19 @t=10 to Tile#9 @t=19
[HeuristicMapping] Successfully mapped operation "neura.store"(%18, %19) : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Found 503 candidate locations for operation: "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#43 @t=19
[tryRouteDataMove] Routing from Tile#42 @t=18 to Tile#43 @t=19
[tryRouteDataMove] Routing from Tile#6 @t=1 to Tile#43 @t=19
[HeuristicMapping] Successfully mapped operation "neura.store"(%20, %21) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Found 386 candidate locations for operation: "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#23 @t=19
[tryRouteDataMove] Routing from Tile#15 @t=18 to Tile#23 @t=19
[tryRouteDataMove] Routing from Tile#13 @t=14 to Tile#23 @t=19
[HeuristicMapping] Successfully mapped operation "neura.store"(%132, %133) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Found 467 candidate locations for operation: "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#12 @t=20
[tryRouteDataMove] Routing from Tile#11 @t=19 to Tile#12 @t=20
[tryRouteDataMove] Routing from Tile#11 @t=16 to Tile#12 @t=20
[HeuristicMapping] Successfully mapped operation "neura.store"(%102, %103) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Found 500 candidate locations for operation: "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Trying candidate 1/1 at tile#20 @t=21
[tryRouteDataMove] Routing from Tile#20 @t=20 to Tile#20 @t=21
[tryRouteDataMove] Successfully routed on same tile using Register #640
[tryRouteDataMove] Routing from Tile#12 @t=18 to Tile#20 @t=21
[HeuristicMapping] Successfully mapped operation "neura.store"(%117, %118) : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
[HeuristicMapping] Successfully mapped all 60 operations.
module attributes {dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">, llvm.ident = "clang version 20.1.7 (https://github.com/llvm/llvm-project.git 6146a88f60492b520a36f8f8f3231e15f3cc6082)"} {
  llvm.mlir.global external @input(dense<[1, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20, -21, 22, -23, 24, -25, 26, -27, 28, -29, 30, -31]> : tensor<32xi32>) {addr_space = 0 : i32, alignment = 16 : i64, dso_local} : !llvm.array<32 x i32>
  llvm.mlir.global external @output(dense<0> : tensor<32xi32>) {addr_space = 0 : i32, alignment = 16 : i64, dso_local} : !llvm.array<32 x i32>
  llvm.mlir.global private unnamed_addr constant @".str"("output[%d] = %d\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local}
  llvm.func @main() -> (i32 {llvm.noundef}) attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", "norecurse", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.addressof @".str" : !llvm.ptr
    %1 = llvm.mlir.addressof @output : !llvm.ptr
    %2 = llvm.mlir.addressof @input : !llvm.ptr
    %3 = "neura.constant"() <{value = 1 : i32}> : () -> i32
    %4 = "neura.constant"() <{value = 0 : i32}> : () -> i32
    %5 = "neura.data_mov"(%3) : (i32) -> i32
    %6 = neura.alloca %5 : i32 -> !llvm.ptr
    %7 = "neura.data_mov"(%3) : (i32) -> i32
    %8 = neura.alloca %7 : i32 -> !llvm.ptr
    %9 = "neura.data_mov"(%3) : (i32) -> i32
    %10 = neura.alloca %9 : i32 -> !llvm.ptr
    %11 = "neura.data_mov"(%4) : (i32) -> i32
    %12 = "neura.data_mov"(%6) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%11, %12) : (i32, !llvm.ptr) -> ()
    %13 = "neura.data_mov"(%4) : (i32) -> i32
    %14 = "neura.data_mov"(%8) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%13, %14) : (i32, !llvm.ptr) -> ()
    neura.br to ^bb1
  ^bb1:  // 2 preds: ^bb0, ^bb3
    %15 = "neura.data_mov"(%8) : (!llvm.ptr) -> !llvm.ptr
    %16 = "neura.load"(%15) : (!llvm.ptr) -> i32
    %17 = "neura.data_mov"(%16) : (i32) -> i32
    %18 = "neura.icmp"(%17) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (i32) -> i1
    %19 = "neura.data_mov"(%18) : (i1) -> i1
    neura.cond_br %19 : i1 then to ^bb2 else to ^bb4
  ^bb2:  // pred: ^bb1
    %20 = "neura.data_mov"(%8) : (!llvm.ptr) -> !llvm.ptr
    %21 = "neura.load"(%20) : (!llvm.ptr) -> i32
    %22 = "neura.data_mov"(%21) : (i32) -> i32
    %23 = neura.sext %22 : i32 -> i64
    %24 = "neura.constant"() <{value = 0 : i32}> : () -> index
    %25 = "neura.data_mov"(%1) : (!llvm.ptr) -> !llvm.ptr
    %26 = "neura.data_mov"(%24) : (index) -> index
    %27 = "neura.data_mov"(%23) : (i64) -> i64
    %28 = "neura.gep"(%25, %26, %27) : (!llvm.ptr, index, i64) -> !llvm.ptr
    %29 = "neura.data_mov"(%4) : (i32) -> i32
    %30 = "neura.data_mov"(%28) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%29, %30) : (i32, !llvm.ptr) -> ()
    neura.br to ^bb3
  ^bb3:  // pred: ^bb2
    %31 = "neura.data_mov"(%8) : (!llvm.ptr) -> !llvm.ptr
    %32 = "neura.load"(%31) : (!llvm.ptr) -> i32
    %33 = "neura.data_mov"(%32) : (i32) -> i32
    %34 = "neura.add"(%33) {rhs_const_value = 1 : i32} : (i32) -> i32
    %35 = "neura.data_mov"(%34) : (i32) -> i32
    %36 = "neura.data_mov"(%8) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%35, %36) : (i32, !llvm.ptr) -> ()
    neura.br to ^bb1
  ^bb4:  // pred: ^bb1
    %37 = func.call @_Z6kernelPiS_(%2, %1) : (!llvm.ptr, !llvm.ptr) -> !llvm.void
    %38 = "neura.data_mov"(%4) : (i32) -> i32
    %39 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%38, %39) : (i32, !llvm.ptr) -> ()
    neura.br to ^bb5
  ^bb5:  // 2 preds: ^bb4, ^bb7
    %40 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    %41 = "neura.load"(%40) : (!llvm.ptr) -> i32
    %42 = "neura.data_mov"(%41) : (i32) -> i32
    %43 = "neura.icmp"(%42) <{cmpType = "slt"}> {rhs_const_value = 32 : i32} : (i32) -> i1
    %44 = "neura.data_mov"(%43) : (i1) -> i1
    neura.cond_br %44 : i1 then to ^bb6 else to ^bb8
  ^bb6:  // pred: ^bb5
    %45 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    %46 = "neura.load"(%45) : (!llvm.ptr) -> i32
    %47 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    %48 = "neura.load"(%47) : (!llvm.ptr) -> i32
    %49 = "neura.data_mov"(%48) : (i32) -> i32
    %50 = neura.sext %49 : i32 -> i64
    %51 = "neura.constant"() <{value = 0 : i32}> : () -> index
    %52 = "neura.data_mov"(%1) : (!llvm.ptr) -> !llvm.ptr
    %53 = "neura.data_mov"(%51) : (index) -> index
    %54 = "neura.data_mov"(%50) : (i64) -> i64
    %55 = "neura.gep"(%52, %53, %54) : (!llvm.ptr, index, i64) -> !llvm.ptr
    %56 = "neura.data_mov"(%55) : (!llvm.ptr) -> !llvm.ptr
    %57 = "neura.load"(%56) : (!llvm.ptr) -> i32
    %58 = llvm.call @printf(%0, %46, %57) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i32, i32) -> i32
    neura.br to ^bb7
  ^bb7:  // pred: ^bb6
    %59 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    %60 = "neura.load"(%59) : (!llvm.ptr) -> i32
    %61 = "neura.data_mov"(%60) : (i32) -> i32
    %62 = "neura.add"(%61) {rhs_const_value = 1 : i32} : (i32) -> i32
    %63 = "neura.data_mov"(%62) : (i32) -> i32
    %64 = "neura.data_mov"(%10) : (!llvm.ptr) -> !llvm.ptr
    "neura.store"(%63, %64) : (i32, !llvm.ptr) -> ()
    neura.br to ^bb5
  ^bb8:  // pred: ^bb5
    %65 = "neura.data_mov"(%4) : (i32) -> i32
    "neura.return"(%65) : (i32) -> ()
  }
  func.func @_Z6kernelPiS_(%arg0: !llvm.ptr {llvm.noundef}, %arg1: !llvm.ptr {llvm.noundef}) -> !llvm.void attributes {CConv = #llvm.cconv<ccc>, accelerator = "neura", dataflow_mode = "predicate", frame_pointer = #llvm.framePointerKind<all>, linkage = #llvm.linkage<external>, mapping_info = {compiled_ii = 12 : i32, mapping_mode = "spatial-temporal", mapping_strategy = "heuristic", rec_mii = 12 : i32, res_mii = 1 : i32, x_tiles = 8 : i32, y_tiles = 8 : i32}, no_inline, no_unwind, optimize_none, passthrough = ["mustprogress", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic", unnamed_addr = 0 : i64, visibility_ = 0 : i64} {
    %0 = "neura.constant"() <{value = "%arg0"}> {mapping_locs = [{id = 55 : i32, resource = "tile", time_step = 18 : i32, x = 7 : i32, y = 6 : i32}]} : () -> !neura.data<!llvm.ptr, i1>
    %1 = "neura.constant"() <{value = "%arg1"}> {mapping_locs = [{id = 10 : i32, resource = "tile", time_step = 18 : i32, x = 2 : i32, y = 1 : i32}]} : () -> !neura.data<!llvm.ptr, i1>
    %2 = "neura.constant"() <{value = 1 : i32}> {mapping_locs = [{id = 5 : i32, resource = "tile", time_step = 0 : i32, x = 5 : i32, y = 0 : i32}]} : () -> !neura.data<i32, i1>
    %3 = "neura.constant"() <{value = 0 : i32}> {mapping_locs = [{id = 42 : i32, resource = "tile", time_step = 18 : i32, x = 2 : i32, y = 5 : i32}]} : () -> !neura.data<i32, i1>
    %4 = "neura.data_mov"(%2) {mapping_locs = [{id = 16 : i32, resource = "link", time_step = 0 : i32}, {id = 42 : i32, resource = "link", time_step = 1 : i32}, {id = 48 : i32, resource = "link", time_step = 2 : i32}, {id = 78 : i32, resource = "link", time_step = 3 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %5 = neura.alloca %4 : !neura.data<i32, i1> {mapping_locs = [{id = 30 : i32, resource = "tile", time_step = 4 : i32, x = 6 : i32, y = 3 : i32}]} -> !neura.data<!llvm.ptr, i1>
    %6 = "neura.data_mov"(%5) {mapping_locs = [{id = 105 : i32, resource = "link", time_step = 4 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %7 = "neura.grant_once"(%6) {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 5 : i32, x = 5 : i32, y = 3 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %8 = "neura.data_mov"(%2) {mapping_locs = [{id = 14 : i32, resource = "link", time_step = 0 : i32}, {id = 11 : i32, resource = "link", time_step = 1 : i32}, {id = 10 : i32, resource = "link", time_step = 2 : i32}, {id = 36 : i32, resource = "link", time_step = 3 : i32}, {id = 608 : i32, resource = "register", time_step = 4 : i32}, {id = 608 : i32, resource = "register", time_step = 5 : i32}, {id = 608 : i32, resource = "register", time_step = 6 : i32}, {id = 608 : i32, resource = "register", time_step = 7 : i32}, {id = 608 : i32, resource = "register", time_step = 8 : i32}, {id = 608 : i32, resource = "register", time_step = 9 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %9 = neura.alloca %8 : !neura.data<i32, i1> {mapping_locs = [{id = 19 : i32, resource = "tile", time_step = 10 : i32, x = 3 : i32, y = 2 : i32}]} -> !neura.data<!llvm.ptr, i1>
    %10 = "neura.data_mov"(%9) {mapping_locs = [{id = 63 : i32, resource = "link", time_step = 10 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %11 = "neura.grant_once"(%10) {mapping_locs = [{id = 18 : i32, resource = "tile", time_step = 11 : i32, x = 2 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %12 = "neura.data_mov"(%2) {mapping_locs = [{id = 15 : i32, resource = "link", time_step = 0 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %13 = neura.alloca %12 : !neura.data<i32, i1> {mapping_locs = [{id = 6 : i32, resource = "tile", time_step = 1 : i32, x = 6 : i32, y = 0 : i32}]} -> !neura.data<!llvm.ptr, i1>
    %14 = "neura.data_mov"(%13) {mapping_locs = [{id = 17 : i32, resource = "link", time_step = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %15 = "neura.grant_once"(%14) {mapping_locs = [{id = 5 : i32, resource = "tile", time_step = 2 : i32, x = 5 : i32, y = 0 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %16 = "neura.data_mov"(%0) {mapping_locs = [{id = 199 : i32, resource = "link", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %17 = "neura.data_mov"(%5) {mapping_locs = [{id = 108 : i32, resource = "link", time_step = 4 : i32}, {id = 138 : i32, resource = "link", time_step = 5 : i32}, {id = 168 : i32, resource = "link", time_step = 6 : i32}, {id = 1728 : i32, resource = "register", time_step = 7 : i32}, {id = 1728 : i32, resource = "register", time_step = 8 : i32}, {id = 1728 : i32, resource = "register", time_step = 9 : i32}, {id = 1728 : i32, resource = "register", time_step = 10 : i32}, {id = 1728 : i32, resource = "register", time_step = 11 : i32}, {id = 1728 : i32, resource = "register", time_step = 12 : i32}, {id = 1728 : i32, resource = "register", time_step = 13 : i32}, {id = 1728 : i32, resource = "register", time_step = 14 : i32}, {id = 1728 : i32, resource = "register", time_step = 15 : i32}, {id = 1728 : i32, resource = "register", time_step = 16 : i32}, {id = 1728 : i32, resource = "register", time_step = 17 : i32}, {id = 1728 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%16, %17) {mapping_locs = [{id = 54 : i32, resource = "tile", time_step = 19 : i32, x = 6 : i32, y = 6 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    %18 = "neura.data_mov"(%1) {mapping_locs = [{id = 29 : i32, resource = "link", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %19 = "neura.data_mov"(%9) {mapping_locs = [{id = 65 : i32, resource = "link", time_step = 10 : i32}, {id = 33 : i32, resource = "link", time_step = 11 : i32}, {id = 29 : i32, resource = "link", time_step = 12 : i32}, {id = 288 : i32, resource = "register", time_step = 13 : i32}, {id = 288 : i32, resource = "register", time_step = 14 : i32}, {id = 288 : i32, resource = "register", time_step = 15 : i32}, {id = 288 : i32, resource = "register", time_step = 16 : i32}, {id = 288 : i32, resource = "register", time_step = 17 : i32}, {id = 288 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%18, %19) {mapping_locs = [{id = 9 : i32, resource = "tile", time_step = 19 : i32, x = 1 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    %20 = "neura.data_mov"(%3) {mapping_locs = [{id = 150 : i32, resource = "link", time_step = 18 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %21 = "neura.data_mov"(%13) {mapping_locs = [{id = 19 : i32, resource = "link", time_step = 1 : i32}, {id = 45 : i32, resource = "link", time_step = 2 : i32}, {id = 41 : i32, resource = "link", time_step = 3 : i32}, {id = 40 : i32, resource = "link", time_step = 4 : i32}, {id = 67 : i32, resource = "link", time_step = 5 : i32}, {id = 66 : i32, resource = "link", time_step = 6 : i32}, {id = 96 : i32, resource = "link", time_step = 7 : i32}, {id = 126 : i32, resource = "link", time_step = 8 : i32}, {id = 1376 : i32, resource = "register", time_step = 9 : i32}, {id = 1376 : i32, resource = "register", time_step = 10 : i32}, {id = 1376 : i32, resource = "register", time_step = 11 : i32}, {id = 1376 : i32, resource = "register", time_step = 12 : i32}, {id = 1376 : i32, resource = "register", time_step = 13 : i32}, {id = 1376 : i32, resource = "register", time_step = 14 : i32}, {id = 1376 : i32, resource = "register", time_step = 15 : i32}, {id = 1376 : i32, resource = "register", time_step = 16 : i32}, {id = 1376 : i32, resource = "register", time_step = 17 : i32}, {id = 1376 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%20, %21) {mapping_locs = [{id = 43 : i32, resource = "tile", time_step = 19 : i32, x = 3 : i32, y = 5 : i32}]} : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    %22 = neura.reserve : !neura.data<!llvm.ptr, i1>
    %23 = "neura.data_mov"(%11) {mapping_locs = [{id = 576 : i32, resource = "register", time_step = 11 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %24 = "neura.phi"(%22, %23) {mapping_locs = [{id = 18 : i32, resource = "tile", time_step = 12 : i32, x = 2 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %25 = neura.reserve : !neura.data<!llvm.ptr, i1>
    %26 = "neura.data_mov"(%7) {mapping_locs = [{id = 928 : i32, resource = "register", time_step = 5 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %27 = "neura.phi"(%25, %26) {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 6 : i32, x = 5 : i32, y = 3 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %28 = neura.reserve : !neura.data<!llvm.ptr, i1>
    %29 = "neura.data_mov"(%15) {mapping_locs = [{id = 16 : i32, resource = "link", time_step = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %30 = "neura.phi"(%28, %29) {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 3 : i32, x = 5 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %31 = "neura.data_mov"(%30) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 3 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %32 = "neura.load"(%31) {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 4 : i32, x = 5 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %33 = "neura.data_mov"(%32) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 4 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %34 = "neura.icmp"(%33) <{cmpType = "slt"}> {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 5 : i32, x = 5 : i32, y = 1 : i32}], rhs_const_value = 32 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
    %35 = "neura.data_mov"(%27) {mapping_locs = [{id = 928 : i32, resource = "register", time_step = 6 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %36 = "neura.data_mov"(%34) {mapping_locs = [{id = 44 : i32, resource = "link", time_step = 5 : i32}, {id = 74 : i32, resource = "link", time_step = 6 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %37 = neura.grant_predicate %35, %36 {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 7 : i32, x = 5 : i32, y = 3 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %38 = "neura.data_mov"(%30) {mapping_locs = [{id = 417 : i32, resource = "register", time_step = 3 : i32}, {id = 417 : i32, resource = "register", time_step = 4 : i32}, {id = 417 : i32, resource = "register", time_step = 5 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %39 = "neura.data_mov"(%34) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 5 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %40 = neura.grant_predicate %38, %39 {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 6 : i32, x = 5 : i32, y = 1 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %41 = "neura.data_mov"(%24) {mapping_locs = [{id = 576 : i32, resource = "register", time_step = 12 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %42 = "neura.data_mov"(%34) {mapping_locs = [{id = 41 : i32, resource = "link", time_step = 5 : i32}, {id = 37 : i32, resource = "link", time_step = 6 : i32}, {id = 33 : i32, resource = "link", time_step = 7 : i32}, {id = 32 : i32, resource = "link", time_step = 8 : i32}, {id = 577 : i32, resource = "register", time_step = 9 : i32}, {id = 577 : i32, resource = "register", time_step = 10 : i32}, {id = 577 : i32, resource = "register", time_step = 11 : i32}, {id = 577 : i32, resource = "register", time_step = 12 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %43 = neura.grant_predicate %41, %42 {mapping_locs = [{id = 18 : i32, resource = "tile", time_step = 13 : i32, x = 2 : i32, y = 2 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %44 = "neura.data_mov"(%37) {mapping_locs = [{id = 928 : i32, resource = "register", time_step = 7 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %45 = "neura.load"(%44) {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 8 : i32, x = 5 : i32, y = 3 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %46 = "neura.data_mov"(%40) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 6 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %47 = "neura.load"(%46) {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 7 : i32, x = 5 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %48 = "neura.data_mov"(%47) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 7 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %49 = neura.sext %48 {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 8 : i32, x = 5 : i32, y = 1 : i32}]} : !neura.data<i32, i1> -> !neura.data<i64, i1>
    %50 = "neura.data_mov"(%45) {mapping_locs = [{id = 103 : i32, resource = "link", time_step = 8 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %51 = "neura.data_mov"(%49) {mapping_locs = [{id = 44 : i32, resource = "link", time_step = 8 : i32}]} : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
    %52 = "neura.gep"(%50, %51) {mapping_locs = [{id = 21 : i32, resource = "tile", time_step = 9 : i32, x = 5 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
    %53 = "neura.data_mov"(%52) {mapping_locs = [{id = 672 : i32, resource = "register", time_step = 9 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %54 = "neura.load"(%53) {mapping_locs = [{id = 21 : i32, resource = "tile", time_step = 10 : i32, x = 5 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %55 = "neura.data_mov"(%54) {mapping_locs = [{id = 672 : i32, resource = "register", time_step = 10 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %56 = "neura.icmp"(%55) <{cmpType = "sgt"}> {mapping_locs = [{id = 21 : i32, resource = "tile", time_step = 11 : i32, x = 5 : i32, y = 2 : i32}], rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i1, i1>
    %57 = "neura.data_mov"(%37) {mapping_locs = [{id = 929 : i32, resource = "register", time_step = 7 : i32}, {id = 929 : i32, resource = "register", time_step = 8 : i32}, {id = 929 : i32, resource = "register", time_step = 9 : i32}, {id = 929 : i32, resource = "register", time_step = 10 : i32}, {id = 929 : i32, resource = "register", time_step = 11 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %58 = "neura.data_mov"(%56) {mapping_locs = [{id = 74 : i32, resource = "link", time_step = 11 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %59 = neura.grant_predicate %57, %58 {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 12 : i32, x = 5 : i32, y = 3 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %60 = "neura.data_mov"(%40) {mapping_locs = [{id = 417 : i32, resource = "register", time_step = 6 : i32}, {id = 417 : i32, resource = "register", time_step = 7 : i32}, {id = 417 : i32, resource = "register", time_step = 8 : i32}, {id = 417 : i32, resource = "register", time_step = 9 : i32}, {id = 417 : i32, resource = "register", time_step = 10 : i32}, {id = 417 : i32, resource = "register", time_step = 11 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %61 = "neura.data_mov"(%56) {mapping_locs = [{id = 73 : i32, resource = "link", time_step = 11 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %62 = neura.grant_predicate %60, %61 {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 12 : i32, x = 5 : i32, y = 1 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %63 = "neura.data_mov"(%43) {mapping_locs = [{id = 60 : i32, resource = "link", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %64 = "neura.data_mov"(%56) {mapping_locs = [{id = 71 : i32, resource = "link", time_step = 11 : i32}, {id = 67 : i32, resource = "link", time_step = 12 : i32}, {id = 608 : i32, resource = "register", time_step = 13 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %65 = neura.grant_predicate %63, %64 {mapping_locs = [{id = 19 : i32, resource = "tile", time_step = 14 : i32, x = 3 : i32, y = 2 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %66 = "neura.data_mov"(%56) {mapping_locs = [{id = 672 : i32, resource = "register", time_step = 11 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %67 = "neura.not"(%66) {mapping_locs = [{id = 21 : i32, resource = "tile", time_step = 12 : i32, x = 5 : i32, y = 2 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %68 = "neura.data_mov"(%43) {mapping_locs = [{id = 576 : i32, resource = "register", time_step = 13 : i32}, {id = 576 : i32, resource = "register", time_step = 14 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %69 = "neura.data_mov"(%67) {mapping_locs = [{id = 71 : i32, resource = "link", time_step = 12 : i32}, {id = 67 : i32, resource = "link", time_step = 13 : i32}, {id = 63 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %70 = neura.grant_predicate %68, %69 {mapping_locs = [{id = 18 : i32, resource = "tile", time_step = 15 : i32, x = 2 : i32, y = 2 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %71 = "neura.data_mov"(%40) {mapping_locs = [{id = 418 : i32, resource = "register", time_step = 6 : i32}, {id = 418 : i32, resource = "register", time_step = 7 : i32}, {id = 418 : i32, resource = "register", time_step = 8 : i32}, {id = 418 : i32, resource = "register", time_step = 9 : i32}, {id = 418 : i32, resource = "register", time_step = 10 : i32}, {id = 418 : i32, resource = "register", time_step = 11 : i32}, {id = 418 : i32, resource = "register", time_step = 12 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %72 = "neura.data_mov"(%67) {mapping_locs = [{id = 73 : i32, resource = "link", time_step = 12 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %73 = neura.grant_predicate %71, %72 {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 13 : i32, x = 5 : i32, y = 1 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %74 = "neura.data_mov"(%37) {mapping_locs = [{id = 930 : i32, resource = "register", time_step = 7 : i32}, {id = 930 : i32, resource = "register", time_step = 8 : i32}, {id = 930 : i32, resource = "register", time_step = 9 : i32}, {id = 930 : i32, resource = "register", time_step = 10 : i32}, {id = 930 : i32, resource = "register", time_step = 11 : i32}, {id = 930 : i32, resource = "register", time_step = 12 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %75 = "neura.data_mov"(%67) {mapping_locs = [{id = 74 : i32, resource = "link", time_step = 12 : i32}]} : (!neura.data<i1, i1>) -> !neura.data<i1, i1>
    %76 = neura.grant_predicate %74, %75 {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 13 : i32, x = 5 : i32, y = 3 : i32}]} : !neura.data<!llvm.ptr, i1>, !neura.data<i1, i1> -> !neura.data<!llvm.ptr, i1>
    %77 = "neura.data_mov"(%59) {mapping_locs = [{id = 101 : i32, resource = "link", time_step = 12 : i32}, {id = 97 : i32, resource = "link", time_step = 13 : i32}, {id = 95 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %78 = "neura.load"(%77) {mapping_locs = [{id = 19 : i32, resource = "tile", time_step = 15 : i32, x = 3 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %79 = "neura.data_mov"(%62) {mapping_locs = [{id = 43 : i32, resource = "link", time_step = 12 : i32}, {id = 14 : i32, resource = "link", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %80 = "neura.load"(%79) {mapping_locs = [{id = 4 : i32, resource = "tile", time_step = 14 : i32, x = 4 : i32, y = 0 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %81 = "neura.data_mov"(%80) {mapping_locs = [{id = 11 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %82 = neura.sext %81 {mapping_locs = [{id = 3 : i32, resource = "tile", time_step = 15 : i32, x = 3 : i32, y = 0 : i32}]} : !neura.data<i32, i1> -> !neura.data<i64, i1>
    %83 = "neura.data_mov"(%78) {mapping_locs = [{id = 65 : i32, resource = "link", time_step = 15 : i32}, {id = 352 : i32, resource = "register", time_step = 16 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %84 = "neura.data_mov"(%82) {mapping_locs = [{id = 10 : i32, resource = "link", time_step = 15 : i32}, {id = 353 : i32, resource = "register", time_step = 16 : i32}]} : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
    %85 = "neura.gep"(%83, %84) {mapping_locs = [{id = 11 : i32, resource = "tile", time_step = 17 : i32, x = 3 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
    %86 = "neura.data_mov"(%85) {mapping_locs = [{id = 36 : i32, resource = "link", time_step = 17 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %87 = "neura.load"(%86) {mapping_locs = [{id = 19 : i32, resource = "tile", time_step = 18 : i32, x = 3 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %88 = "neura.data_mov"(%65) {mapping_locs = [{id = 65 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %89 = "neura.load"(%88) {mapping_locs = [{id = 11 : i32, resource = "tile", time_step = 15 : i32, x = 3 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %90 = "neura.data_mov"(%62) {mapping_locs = [{id = 41 : i32, resource = "link", time_step = 12 : i32}, {id = 37 : i32, resource = "link", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %91 = "neura.load"(%90) {mapping_locs = [{id = 11 : i32, resource = "tile", time_step = 14 : i32, x = 3 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %92 = "neura.data_mov"(%91) {mapping_locs = [{id = 33 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %93 = neura.sext %92 {mapping_locs = [{id = 10 : i32, resource = "tile", time_step = 15 : i32, x = 2 : i32, y = 1 : i32}]} : !neura.data<i32, i1> -> !neura.data<i64, i1>
    %94 = "neura.data_mov"(%89) {mapping_locs = [{id = 352 : i32, resource = "register", time_step = 15 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %95 = "neura.data_mov"(%93) {mapping_locs = [{id = 30 : i32, resource = "link", time_step = 15 : i32}]} : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
    %96 = "neura.gep"(%94, %95) {mapping_locs = [{id = 11 : i32, resource = "tile", time_step = 16 : i32, x = 3 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
    %97 = "neura.data_mov"(%96) {mapping_locs = [{id = 33 : i32, resource = "link", time_step = 16 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %98 = "neura.load"(%97) {mapping_locs = [{id = 10 : i32, resource = "tile", time_step = 17 : i32, x = 2 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %99 = "neura.data_mov"(%98) {mapping_locs = [{id = 30 : i32, resource = "link", time_step = 17 : i32}, {id = 352 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %100 = "neura.data_mov"(%87) {mapping_locs = [{id = 65 : i32, resource = "link", time_step = 18 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %101 = "neura.add"(%99, %100) {mapping_locs = [{id = 11 : i32, resource = "tile", time_step = 19 : i32, x = 3 : i32, y = 1 : i32}]} : (!neura.data<i32, i1>, !neura.data<i32, i1>) -> !neura.data<i32, i1>
    %102 = "neura.data_mov"(%101) {mapping_locs = [{id = 34 : i32, resource = "link", time_step = 19 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %103 = "neura.data_mov"(%96) {mapping_locs = [{id = 34 : i32, resource = "link", time_step = 16 : i32}, {id = 385 : i32, resource = "register", time_step = 17 : i32}, {id = 385 : i32, resource = "register", time_step = 18 : i32}, {id = 385 : i32, resource = "register", time_step = 19 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%102, %103) {mapping_locs = [{id = 12 : i32, resource = "tile", time_step = 20 : i32, x = 4 : i32, y = 1 : i32}]} : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    %104 = "neura.data_mov"(%70) {mapping_locs = [{id = 61 : i32, resource = "link", time_step = 15 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %105 = "neura.load"(%104) {mapping_locs = [{id = 10 : i32, resource = "tile", time_step = 16 : i32, x = 2 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %106 = "neura.data_mov"(%73) {mapping_locs = [{id = 41 : i32, resource = "link", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %107 = "neura.load"(%106) {mapping_locs = [{id = 12 : i32, resource = "tile", time_step = 14 : i32, x = 4 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %108 = "neura.data_mov"(%107) {mapping_locs = [{id = 40 : i32, resource = "link", time_step = 14 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %109 = neura.sext %108 {mapping_locs = [{id = 20 : i32, resource = "tile", time_step = 15 : i32, x = 4 : i32, y = 2 : i32}]} : !neura.data<i32, i1> -> !neura.data<i64, i1>
    %110 = "neura.data_mov"(%105) {mapping_locs = [{id = 30 : i32, resource = "link", time_step = 16 : i32}, {id = 34 : i32, resource = "link", time_step = 17 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %111 = "neura.data_mov"(%109) {mapping_locs = [{id = 69 : i32, resource = "link", time_step = 15 : i32}, {id = 384 : i32, resource = "register", time_step = 16 : i32}, {id = 384 : i32, resource = "register", time_step = 17 : i32}]} : (!neura.data<i64, i1>) -> !neura.data<i64, i1>
    %112 = "neura.gep"(%110, %111) {mapping_locs = [{id = 12 : i32, resource = "tile", time_step = 18 : i32, x = 4 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<i64, i1>) -> !neura.data<!llvm.ptr, i1>
    %113 = "neura.data_mov"(%112) {mapping_locs = [{id = 384 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %114 = "neura.load"(%113) {mapping_locs = [{id = 12 : i32, resource = "tile", time_step = 19 : i32, x = 4 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %115 = "neura.data_mov"(%114) {mapping_locs = [{id = 40 : i32, resource = "link", time_step = 19 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %116 = "neura.add"(%115) {mapping_locs = [{id = 20 : i32, resource = "tile", time_step = 20 : i32, x = 4 : i32, y = 2 : i32}], rhs_const_value = 0 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %117 = "neura.data_mov"(%116) {mapping_locs = [{id = 640 : i32, resource = "register", time_step = 20 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %118 = "neura.data_mov"(%112) {mapping_locs = [{id = 40 : i32, resource = "link", time_step = 18 : i32}, {id = 641 : i32, resource = "register", time_step = 19 : i32}, {id = 641 : i32, resource = "register", time_step = 20 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%117, %118) {mapping_locs = [{id = 20 : i32, resource = "tile", time_step = 21 : i32, x = 4 : i32, y = 2 : i32}]} : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    %119 = "neura.data_mov"(%65) {mapping_locs = [{id = 608 : i32, resource = "register", time_step = 14 : i32}, {id = 608 : i32, resource = "register", time_step = 15 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %120 = "neura.data_mov"(%70) {mapping_locs = [{id = 60 : i32, resource = "link", time_step = 15 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %121 = "neura.phi"(%119, %120) {mapping_locs = [{id = 19 : i32, resource = "tile", time_step = 16 : i32, x = 3 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %122 = "neura.data_mov"(%59) {mapping_locs = [{id = 928 : i32, resource = "register", time_step = 12 : i32}, {id = 928 : i32, resource = "register", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %123 = "neura.data_mov"(%76) {mapping_locs = [{id = 929 : i32, resource = "register", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %124 = "neura.phi"(%122, %123) {mapping_locs = [{id = 29 : i32, resource = "tile", time_step = 14 : i32, x = 5 : i32, y = 3 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %125 = "neura.data_mov"(%62) {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 12 : i32}, {id = 416 : i32, resource = "register", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %126 = "neura.data_mov"(%73) {mapping_locs = [{id = 417 : i32, resource = "register", time_step = 13 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %127 = "neura.phi"(%125, %126) {mapping_locs = [{id = 13 : i32, resource = "tile", time_step = 14 : i32, x = 5 : i32, y = 1 : i32}]} : (!neura.data<!llvm.ptr, i1>, !neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %128 = "neura.data_mov"(%127) {mapping_locs = [{id = 42 : i32, resource = "link", time_step = 14 : i32}, {id = 46 : i32, resource = "link", time_step = 15 : i32}, {id = 51 : i32, resource = "link", time_step = 16 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    %129 = "neura.load"(%128) {mapping_locs = [{id = 23 : i32, resource = "tile", time_step = 17 : i32, x = 7 : i32, y = 2 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<i32, i1>
    %130 = "neura.data_mov"(%129) {mapping_locs = [{id = 80 : i32, resource = "link", time_step = 17 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %131 = "neura.add"(%130) {mapping_locs = [{id = 15 : i32, resource = "tile", time_step = 18 : i32, x = 7 : i32, y = 1 : i32}], rhs_const_value = 1 : i32} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %132 = "neura.data_mov"(%131) {mapping_locs = [{id = 51 : i32, resource = "link", time_step = 18 : i32}]} : (!neura.data<i32, i1>) -> !neura.data<i32, i1>
    %133 = "neura.data_mov"(%127) {mapping_locs = [{id = 44 : i32, resource = "link", time_step = 14 : i32}, {id = 72 : i32, resource = "link", time_step = 15 : i32}, {id = 76 : i32, resource = "link", time_step = 16 : i32}, {id = 736 : i32, resource = "register", time_step = 17 : i32}, {id = 736 : i32, resource = "register", time_step = 18 : i32}]} : (!neura.data<!llvm.ptr, i1>) -> !neura.data<!llvm.ptr, i1>
    "neura.store"(%132, %133) {mapping_locs = [{id = 23 : i32, resource = "tile", time_step = 19 : i32, x = 7 : i32, y = 2 : i32}]} : (!neura.data<i32, i1>, !neura.data<!llvm.ptr, i1>) -> ()
    neura.ctrl_mov %127 -> %28 {mapping_locs = [{id = 416 : i32, resource = "register", time_step = 14 : i32}]} : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
    neura.ctrl_mov %124 -> %25 {mapping_locs = [{id = 929 : i32, resource = "register", time_step = 14 : i32}, {id = 929 : i32, resource = "register", time_step = 15 : i32}, {id = 929 : i32, resource = "register", time_step = 16 : i32}, {id = 929 : i32, resource = "register", time_step = 17 : i32}]} : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
    neura.ctrl_mov %121 -> %22 {mapping_locs = [{id = 63 : i32, resource = "link", time_step = 16 : i32}, {id = 578 : i32, resource = "register", time_step = 17 : i32}, {id = 578 : i32, resource = "register", time_step = 18 : i32}, {id = 578 : i32, resource = "register", time_step = 19 : i32}, {id = 578 : i32, resource = "register", time_step = 20 : i32}, {id = 578 : i32, resource = "register", time_step = 21 : i32}, {id = 578 : i32, resource = "register", time_step = 22 : i32}, {id = 578 : i32, resource = "register", time_step = 23 : i32}]} : !neura.data<!llvm.ptr, i1> !neura.data<!llvm.ptr, i1>
    "neura.return"() {mapping_locs = [{id = 38 : i32, resource = "tile", time_step = 19 : i32, x = 6 : i32, y = 4 : i32}]} : () -> ()
  }
  llvm.func @printf(!llvm.ptr {llvm.noundef}, ...) -> i32 attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"}
}

